/**
 * Библиотека Tools
 */
tools = {}

/**
 * Преобразует объект в строку указанного формата (json, xml).
 * @param vObjectPARAM - объект (object) для преобразования.
 * @param sFormatPARAM - Возможны два значения (json, xml). Задает формат возвращаемой строки.
 * @param [iDepth] - необязательный по умолчанию 0. Глубина дочерних свойств объекта, до которой можно спускаться.
 *     Должна быть не больше 5.
 * @param [sName] - необязательный. Параметр указывает название тега (для XML), в который будут заключены данные,
 *     полученные из _vObjectPARAM. По умолчанию <value></value>
 * @returns {string} - Возвращаемый результат – строка (string) полученная из объекта.
 */
tools.object_to_text = function (vObjectPARAM, sFormatPARAM, iDepth, sName) {
}

/**
 * Вызов метода из библиотеки программного кода.
 * @param oLibraryParam - Объект. Код библиотеки программного кода, в которой описан вызываемый метод.
 * @param sMethodNameParam - Строка. Название вызываемого метода.
 * @param arrParams - Массив. Строка в формате json, задающая значения массива параметров вызываемого метода. Параметры
 *     перечисляются через запятую, и весь набор параметров заключается в квадратные скобки.
 * @returns {*} - Различные типы данных. Результат выполнения метода <sMethodNameParam>, определяемый типом указанного
 *     метода.
 */
tools.call_code_library_method = function (oLibraryParam, sMethodNameParam, arrParams) {
}

/**
 * Преобразует строку в объект. Например, строку в формате json в объект. Или строку, содержащую XML, в объект.
 * @param sSomeObjectPARAM - строка в формате json или строка, содержащая XML.
 * @returns {{}} - полученный объекта (object).
 */
tools.read_object = function (sSomeObjectPARAM) {
}

/**
 * Функция возвращает строку с полным путем из родительских элементов карты знаний (значений) без классификатора. Путь
 * разделен указанным в параметрах функции разделителем.
 * @param knowledge_partID - необязательный, если передан_knowledge_partDoc. ID значения, для которого нужно найти
 *     пусть.
 * @param [knowledge_partDoc] - TopElem значения, для которого нужно найти пусть.
 * @param [depth] - глубина пути, число, показывающее длину цепочки в пути. Если 0, то показывается полная цепочка
 *     пути. По умолчанию 0.
 * @param [top] - параметр направления показа пути. Если 1, то путь  рассчитывается 'сверху', то есть от
 *     классификатора. Если 0, то путь рассчитывается 'снизу', то есть от текущего значения. По умолчанию 1.
 * @param [separator] - разделитель. Если указана пустая строка '', по умолчанию используется разделитель ' -> '.
 * @returns {string} - строка (string) полным путем из родительских элементов карты знаний (значений) без
 *     классификатора.
 */
tools.knowledge_part_path_by_knowledge_part_id = function (knowledge_partID, knowledge_partDoc, depth, top, separator) {
}

/**
 * Возвращает массив из каталожных записей типов функциональных руководителей (boss_types), соответствующих указанному
 * объекту и указанному пользователю. Например, если выбран объект – определенное мероприятие – и пользователь –
 * руководитель отдела, который сам участвовали в данном мероприятии, то типы руководителя могут быть следующими:
 * «Участник мероприятия», «Руководитель участника мероприятия». Если выбран объект – сотрудник отдела – и пользователь
 * – руководитель отдела, в котором работает указанный сотрудник, то типы руководителя могут быть следующими:
 * «Непосредственный руководитель», «Руководитель обучения» и т.д.
 * @param iUserIDParam - Целое число. ID сотрудника, для которого нужно определить список типов функциональных
 *     руководителей.
 * @param iObjectIDParam - Целое число. ID объекта, относительно которого нужно определить список типов функциональных
 *     руководителей.
 * @returns {[]} - Массив. Массив из каталожных записей типов функциональных руководителей (boss_types),
 *     соответствующих указанному объекту и указанному пользователю.
 */
tools.get_object_relative_boss_types = function (iUserIDParam, iObjectIDParam) {
}

/**
 * Возвращает массив каталожных записей операций, определяемых типами руководителей  (boss_types), который передается в
 * функцию. Возвращает объединение операций доступных отдельному типу руководителя. При этом возвращаются только
 * операции, привязанные к определённому (заданному параметрами функции) типу объекта (каталога) или все операции, если
 * тип не указан.
 * @param arrBossTypesParam - Массив. Массив каталожных записей типов руководителей (boss_types).
 * @param [sCatalogNameParam] - Строка. Строка с названием типа объекта (каталога без ‘s’ на конце). Если передана
 *     пустая строка, то вернет все операция доступные указанным типам руководителей.
 * @returns {[]}
 */
tools.get_relative_operations_by_boss_types = function (arrBossTypesParam, sCatalogNameParam) {
}

/**
 * Функция заполняет некоторые поля (дополнительную информацию) в карточке объекта-приемника данных на основе значений
 * из объекта-источника данных. В качестве источника данных используется TopElem соответствующего документа. Приемником
 * может быть элемент любого уровня в xml-структуре, содержащий нужные поля. В зависимости от типа источника
 * заполняются разные поля в приемнике.
 * @param type - Строка. Строка, содержащая название типа источника объекта.
 * @param source - Объект XmlElem (TopElem). TopElem документа-приемника данных (документа, которому передаются
 *     данные).
 * @param object_id - Целое число. ID документа-источника данных.
 * @param [object_doc] - Объект XmlElem (TopElem). TopElem документа-источника данных.
 * @param [custom_flag] - Булево. Если значение данного атрибута равно true и значение атрибута type равно 'event', то
 *     в интерфейс администратора выводится сообщение о количестве преподавателей в мероприятии.
 * @returns {boolean} - Булево. Возвращает значение true, если операция завершилась успешно и при заполнении не было
 *     выявлено ошибок, или false - если заполнение произошло с ошибкой. Если в приемнике данных не было полей для
 *     заполнения или в источнике данных не было необходимых данных, функция вернет значение true.
 */
tools.common_filling = function (type, source, object_id, object_doc, custom_flag) {
}

/**
 *
 * @param sCodeSaveExecutionParam
 * @param oEnvParam
 * @returns {*}
 */
tools.safe_execution = function (sCodeSaveExecutionParam, oEnvParam) {
}

/**
 * Функция возвращает набор заполненных настраиваемых полей для данного каталога и данного документа. Если указан
 * только первый параметр, функция вернет список полей без значений.
 * @param catalog - Строка. Строка с названием каталога без ‘s’ на конце.
 * @param [top_id] - Целое число. ID документа, для которого нужно вернуть набор полей.
 * @param [source] - TopElem. TopElem документа, для которого нужно вернуть набор полей.
 * @returns {{}} - Объект XmlElem. Объект с набором заполненных настраиваемых полей для данного каталога и данного
 *     документа.
 */
tools.get_custom_template = function (catalog, top_id, source) {
}

/**
 * Устаревшая функция. Больше не используется. Перенесена в библиотеку tools_web. Вместо нее рекомендуется использовать
 * функцию tools_web.get_web_str. Возвращает текстовое значение константы для текущего языка (языка, используемого в
 * интерфейсе).
 * @param sNameParam - Строка. Строковое выражение ID-константы в XML-структуре текущего языка.
 * @returns {string} - Строка. Строка со значением константы для текущего языка или строка вида 'UNDEFINED - ' +
 *     sNameParam, если такой константы не найдено.
 */
tools.get_web_str = function (sNameParam) {
}

