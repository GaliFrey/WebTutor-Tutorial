/**
 *
 * @param keyValue - значение ключа (Any)
 * @param [keyName] - имя элемента, являющегося ключом (String). Необязательный аргумент. Если имя ключа не указано,
 *     используется первичный ключ.
 * @returns {{}} - Возвращает дочерний элемент с заданным значением ключевого поля. Если дочерний элемент не найден,
 *     возвращает undefined.
 * @constructor
 */
Object.prototype.GetOptChildByKey = function (keyValue, keyName) {
};

/**
 *
 * @returns {boolean} - Возвращает true если существует хоть один соответствующий множественный элемент.
 */
Object.prototype.HasValue = function () {
};

/**
 * Возвращает первый элемент заданного массива или второй аргумент, если массив пустой. Если массив не содержит ни
 * одного элемента, функция а второй аргумент отсутствует, то функция возвращает undefined.
 * @param array - Исходный массив
 * @param [value] - Строка, число, объект или массив. Значение, которое возвращает функция, если из исходного массива
 *     не
 *     удалось получить первый элемент (например, если исходный массив пустой)
 * @returns {*} - Отобранный элемент массива или значение аргумента <value>
 */
function ArrayOptFirstElem(array, value) {
}

/**
 * Выполняет заданный запрос на языке XQuery. В сетевой версии приложения запрос выполняется на сервере.
 * @param query - Строка. Строчное выражение, содержащее запрос.
 * @param [options] -  Строка. Набор опций запроса. Допустимый набор опций: lds-server - явный адрес сервера
 *     приложения, на который будет отправлен запрос (String). Используется для обмена данных между серверами.
 *     preload-foreign-data - заранее кэшировать связанные данные (Bool). Обычно используется при показе списков в
 *     пользовательском интерфейсе сетевой версии, в которых будет использовать связанные данные (ForeignElem).
 * @returns {[]} - Массив. Массив объектов, отобранных запросом. Результат действия функции.
 */
function XQuery(query, options) {
}

/**
 * Открывает XML-документ и возвращает ссылку на объект типа XmlDoc. Если XML-документ, указанный в аргументе, не
 * найден, программа выдает ошибку
 * @param url - Строка. Url документа.
 * @param [options] - Строка. Опции открытия документа в виде "param1='value1';param2='value2';..."
 * Примерный список возможных параметров:
 <form>
 Тип: Строка. Url формы, используемой при открытии. Форма, указанная в самом документе, будет игнорироваться.
 <ignore-top-elem-name>
 Тип: Булево. Игнорирование имени корневого элемента. Позволяет использовать одну общую форму для документов с разными именами корневых элементов.
 <drop-namespaces>
 Тип: Булево. Удаление наименований пространств имен в названиях элементов.
 <ui-text>
 Тип: Булево. Поддержание загрузки документов с многоязычными данными при работе с данными на языке текущего пользовательского интерфейса.
 <format>
 Тип: Строка. Формат встроенного конвертора для преобразования данных (в виде XML) в другие форматы. Поддерживаются следующие форматы: "sv" (separated values), "win.ini", "excel", "smml".
 Например: 'format=excel'
 <delim>
 Тип: Строка. Разделитель, используемый для формата "csv". Можно задать символ явно либо использовать значения tab (табуляция) или sem (точка с запятой).
 <header-line>
 Тип: Булево. Указание на то, что первая строка для формата "csv" содержит названия полей.
 <lower-case-names>
 Тип: Булево. Приведение названия полей для формата "csv" к нижнему регистру.
 * @returns {{}} - Объект XmlDoc. Ссылка на документ. Результат действия функции.
 */
function OpenDoc(url, options) {
}

/**
 * Возвращает url объектного документа с заданным идентификационным номером (id).
 * @param docID - Целое число. Идентификационный номер (id) документа.
 * @param [dbName] - Строка. Имя информационной базы. Если имя базы не указано, то функция обращается к текущей
 *     информационной базе.
 * @returns {string} - Строка. Строка, содержащая url документа.
 */
function UrlFromDocID(docID, dbName) {
}


/**
 * Интерпретирует содержимое страницы по правилам ASP из заданного файла.
 * @param pageUrl - Строка. Url, содержащий текст активной страницы.
 * @param [option] - Строка. Опция. Поддерживается единственная опция: strict-errors=1 - завершать функцию с ошибкой,
 *     если таковая возникнет при обработке страницы. По умолчанию, в случае возникновения ошибки ее текст добавляется
 *     к результату, а функция завершается без ошибки.
 * @returns {string} - Интерпретирует содержимое страницы по правилам ASP из заданного файла.
 */
function EvalCodePageUrl(pageUrl, option) {
}

/**
 * Интерпретирует содержимое страницы по правилам ASP из заданной строки.
 * @param pageData - Строка. Строка, содержащая текст страницы.
 * @param [raiseErrors] - Булево. Аргумент, указывающий на завершение функции с ошибкой, если таковая возникнет при
 *     обработке страницы (true). По умолчанию, в случае возникновения ошибки ее текст добавляется к результату, а
 *     функция завершается без ошибки.
 * @returns {string} - Строка. Результат действия функции.
 */
function EvalCodePage(pageData, raiseErrors) {
}

/**
 * Открывает документ (библиотеку) либо с расширением XML, содержащий набор методов, и возвращает его корневой элемент,
 * либо с расширением JS, содержащий функции, возвращает псевдо-документ (псевдо-форму), содержащий те же функции.
 * Далее могут быть выполнены указанные методы и функции.
 * @param url - Строка. Url загружаемого документа с расширением XML или JS.
 * @returns {{}} - Объект XmlDoc. Ссылка на документ. Результат действия функции.
 */
function OpenCodeLib(url) {
}

/**
 * Метод объекта. Возвращает значение атрибута объекта. Если атрибут отсутствует, выдается значение undefined.
 * @param propName - наименование атрибута объекта.
 * @param [defaultVal] - значение по умолчанию, возвращаемое в случае отсутствия атрибута (Any). Необязательный
 *     аргумент. По умолчанию равен undefined.
 * @returns {*} - Возвращает значение атрибута объекта. Если атрибут отсутствует, выдает undefined.
 */
Object.prototype.GetOptProperty = function (propName, defaultVal) {
};

/**
 * Вызывает исключение специального типа, соответствующее нажатию пользователями кнопки "Cancel". Позволяет
 * генерировать исключение, на которое не будет выдаваться сообщение об ошибке.
 */
function Cancel() {
}

/**
 * Создает новый XML-документ по заданной форме.
 * @param formUrl - Строка. Url формы.
 * @returns {{}} - Объект XmlDoc. Ссылка на документ. Результат действия функции.
 */
function OpenNewDoc(formUrl) {
}

/**
 * Преобразует значение аргумента к целому неотрицательному числу (округление производится в меньшую сторону). Если
 * основной аргумент не может быть преобразован к целому неотрицательному числу, функция возвращает второй аргумент (не
 * обязательно числового типа) или значение undefined без прерывания выполняемого кода (если второй аргумент
 * отсутствует).
 * @param arg1 - Целое, вещественное неотрицательное число или строка (строка, содержащая целое неотрицательное число).
 *     Основной аргумент. Исходное значение.
 * @param [arg2] - Строка, Число, Булево или др. Второй аргумент.
 * @returns {number} - Целое неотрицательное число или тип второго аргумента. Результат действия функции.
 */
function OptInt(arg1, arg2) {
    return 1;
}

/**
 * Возвращает корневой элемент в  документе. Так же к можно обратиться к корневому элементу, используя его имя, но
 * TopElem - более универсальный способ.
 * @type {{}}
 */
Object.prototype.TopElem = {};

/**
 * Объект Response доступен на сервере xHttp.exe при вызове кода веб-страницы. Обозначает ответ сервера на
 * соответствующий HTTP-запрос к странице. Обычно данные объекты используются в html-файлах.
 * @type {{}}
 */
Response = {};

/**
 * Записывает содержимое строки в тело HTTP-ответа. Содержимое предварительно накапливается в буфере или сразу
 * направляется в сеть в зависимости от значения атрибута WriteMode. Именно с помощью этого метода транслируется
 * конструкция вида <%=xxx%> в ASP-страницах.
 * @param str - Строка. Строка с данными, которые выводятся в тело HTTP-ответа.
 * @param [encode] - Булево. Параметр маскирования передаваемых данных (true – производится маскирование данных по
 *     правилам HTML, false – маскирование не производится). По умолчанию равен false.
 * @returns {*} - Записывает содержимое строки в тело HTTP-ответа. Возвращаемое значение отсутствует.
 */
Response.Write = function (str, encode) {
};

/**
 * Находит первый элемент массива, удовлетворяющий заданному условию. Если элемент, удовлетворяющий условию, не найден,
 * возвращается undefined.
 * @param array - Массив. Исходный массив.
 * @param qualExpr - Строка. Выражение, определяющее соответствие элемента массива заданному критерию и вычисляемое
 *     относительно каждого элемента массива. При формировании данного выражения может быть использован указатель This.
 * @returns {*} - Элемент массива. Отобранный элемент массива. Результат действия функции.
 */
function ArrayOptFind(array, qualExpr) {
}

/**
 * Изменяет исходную дату с учетом заданного времени (часов, минут и секунд). Если указан только первый аргумент,
 * функция возвращает дату без указания времени.
 * @param date - Дата. Исходная дата, из которой производится вычитание.
 * @param [hours] - Целое число. Количество часов в результирующей дате.
 * @param [minutes] - Целое число. Количество минут в результирующей дате.
 * @param [seconds] - Целое число. Количество секунд в результирующей дате.
 * @returns {date} - Дата. Измененная дата. Результат действия функции. При наличии аргументов «hours, minutes» или
 *     «hours, minutes, seconds» функция возвращает исходную дату с учетом заданного времени (часов, минут и секунд).
 */
function DateNewTime(date, hours, minutes, seconds) {
}

/**
 * Преобразует дату в строку в формате, используемом по умолчанию в операционной системе. Если в качестве аргумента
 * передается null или пустая строка, функция возвращает пустую строку.
 * @param date - Дата. Исходная дата. Вместо объекта типа Дата аргументом может быть значение null или пустая строка.
 * @param [showTime] - Булево. Включение времени в строку (true – время включается, false – время не включается). По
 *     умолчанию данный аргумент принимает значение true.
 * @param [showSeconds] - Булево. Включение количества секунд в строку (true – количество секунд включается, false –
 *     количество секунд не включается). По умолчанию данный аргумент принимает значение true.
 * @returns {string} - Строка. Строка, содержащая исходную дату. Результат действия функции.
 */
function StrDate(date, showTime, showSeconds) {
}

/**
 * Преобразует значение аргумента к целому неотрицательному числу (округление производится в меньшую сторону). Если
 * аргумент не может быть преобразован к целому неотрицательному числу, функция выдает ошибку.
 * @param arg - Целое, вещественное неотрицательное число или строка (строка, содержащая целое неотрицательное число).
 *     Исходное значение.
 * @returns {number} - Целое неотрицательное число. Результат действия функции.
 */
function Int(arg) {
}

/**
 * Преобразует исходное значение в константу (литерал) языка запросов XQuery, соответствующую типу исходного значения.
 * Функция используется для генерирования выражений на языке XQuery из программы.
 * @param arg - Строка, целое или вещественное число, дата и др. Исходное значение.
 * @returns {*} - Тип: Строка. Результат действия функции.
 * Значение типа null переводится в строку 'null()'.
 * Значение типа Строка заключается в одинарные кавычки, при этом существующие одинарные кавычки внутри строки
 *     преобразуются в двойные кавычки в соответствии с правилами языка XQuery.
 * Значения типов Целое число и Вещественное число переводятся в соответствующие строковые выражения.
 * Значение типа Булево переводится в строку 'true()' или 'false()'.
 * Значение типа Дата переводится в строку, содержащую дату и время в формате языка XQuery.
 */
function XQueryLiteral(arg) {
}

/**
 * Возвращает строку, полученную путем соединения данных из элементов массива.
 * @param array - Массив. Исходный массив.
 * @param elemExpr - Строка. Выражение, вычисляющее значение, используемое для соединения данных, полученных на
 *     основании полей элементов массива. В простейшем случае в качестве данного аргумента может быть использовано имя
 *     поля элемента массива. При формировании данного выражения может быть использован указатель This.
 * @param [delim] - Строка. Строка-разделитель между соединяемыми данными.
 * @returns {string} - Строка. Строковое выражение, полученное путем соединения данных из элементов массива. Результат
 *     действия функции.
 */
function ArrayMerge(array, elemExpr, delim) {
}

/**
 * Выбирает значение определенного поля (атрибута) из каждого элемента массива и возвращает новый массив той же длины,
 * содержащий выбранные значения.
 * @param array - Массив. Исходный массив.
 * @param [fieldExpr] - Строка. Строка, содержащая имя поля, по которому производится отбор (в общем случае -
 *     выражение, вычисляемое относительно каждого элемента исходного массива). При формировании данного выражения
 *     может быть использован указатель This.
 * @returns {[]} - Массив. Массив, содержащий выбранные значения. Результат действия функции.
 */
function ArrayExtract(array, fieldExpr) {
}

/**
 * Преобразует аргумент для вставки в xml в качестве значения атрибута. В результате действия функции выполняется
 * замена ряда символов аргумента:
 * - символ перевода строки преобразуется в &#10;
 * - символ табуляции – в &#09;
 * - символ & - в &lt;
 * - символ < - в &amp;
 * - символ двойных кавычек - в &quot;
 * @param str - Строка. Строка, подлежащая преобразованию для вставки в xml. Исходное значение.
 * @returns {string} - Строка. Строка, преобразованная для вставки в xml. Результат действия функции.
 */
function XmlAttrEncode(str) {
}

/**
 * Метод объекта. Устанавливает значение атрибута объекта. Если атрибут отсутствует, добавляет его.
 * @param propName - наименование атрибута объекта.
 * @param propVal - значение атрибута объекта.
 * @returns {*}
 */
Object.prototype.SetProperty = function (propName, propVal) {
};

/**
 * Возвращает количество элементов массива. Примечание - Для массивов прямого доступа функция срабатывает мгновенно,
 * для сложных массивов (например, результатов XQuery) вызов этой функции может повлечь за собой обращение к серверу
 * либо другую длительную по времени операцию, поэтому не следует использовать данную функцию внутри циклов.
 * @param array - Массив. Исходный массив.
 * @returns {number} - Целое число. Количество элементов исходного массива. Результат действия функции.
 */
function ArrayCount(array) {
}

/**
 * Добавляет дочерний элемент и возвращает указатель на него. Если текущий элемент создан по форме, то он должен быть
 * простым массивом. При этом аргументы для вызова функции не требуются. Если текущий элемент является динамическим
 * (т.е. построенным без формы), то добавляется дочерний динамический элемент с именем и типом, указанных в качестве
 * аргументов.
 * @param [name] - имя дочернего элемента (String). Необязательный аргумент
 * @param [type] - тип дочернего элемента (String). Необязательный аргумент
 * @returns {{}} - возвращает указатель на созданный объект
 */
Object.prototype.AddChild = function (name, type) {
};

/**
 * Преобразует документ (как правило, вновь созданный) в объектный с присвоением нового id (и соответственно url). В
 * новой объектной модели может также использоваться метод DefaultDb.OpenNewObjectDoc(), который сразу и создает новый
 * объектный документ, и присваивает ему id и url.
 * @param [arg1] - Строка. Имя базы данных. Для текущей базы данных может использоваться имя DefaultDb.
 */
Object.prototype.BindToDb = function (arg1) {
};

/**
 * Сохраняет документ. Если аргумент не указан, то сохраняет документ под существующим url. Если аргумент указан,
 * устанавливает url документа и сохраняет его.
 * @param [docUrl] - Строка. Url, под которым должен быть сохранен документ.
 */
Object.prototype.Save = function (docUrl) {
};

/**
 * Ищет дочерний элемент с заданным ключевым элементом. Если не находит, то добавляет новый дочерний элемент, и его
 * ключевому полю присваивает заданное значение. Возвращает ранее существовавший или вновь созданный дочерний элемент.
 * @param keyValue - значение ключа (Any).
 * @param [keyName] - имя элемента, являющегося ключом (String). Необязательный аргумент. Если имя ключа не указано,
 *     используется первичный ключ.
 * @returns {{}} - Объект XmlElem
 */
Object.prototype.ObtainChildByKey = function (keyValue, keyName) {
};

/**
 * ИД документа
 * @type {number}
 */
Object.prototype.DocID = 1;

/**
 * Удаляет символы пробела, перевода строк и табуляции в начале и в конце исходной строки. Если указанные символы в
 * начале и в конце исходной строки отсутствуют, то функция возвращает исходную строку без изменения.
 * @param str - Строка. Исходная строка.
 * @returns {string} - Строка. Копия исходной строки, из которой удалены символы пробела, перевода строк и табуляции в
 *     начале и в конце. Результат действия функции.
 */
function Trim(str) {
}

/**
 * Возвращает количество символов в строке.
 * @param str - Строка. Исходная строка.
 * @returns {number} - Целое число. Количество символов в строке. Результат действия функции.
 */
function StrCharCount(str) {
}

/**
 * Выполняет код JavaScript аналогично функции eval, но внутри т.н. критической секции, что исключает одновременно
 * выполнение кода из разных потоков. Функция как правило используется для доступа к данным типа Non Thread Safe,
 * например, к глобальным XML-документам. Данной функцией следует пользоваться с осторожностью, поскольку глобальная
 * секция является общей для всего приложения. Не следует выполнять внутри критической секции код, который может занять
 * продолжительное время (обращения к диску, к сети и т.д.)
 * @param codeString - Строка. Строковое значение, содержащее код JavaScript.
 * @returns {*} - Строка, Число, Булево или др. Результат выполнения кода.
 */
function EvalCs(codeString) {
}

/**
 * Преобразует набор пар данных объекта «имя атрибута - значение» в строку вида 'name1=value1&name2=value2&...' для
 * использования в качестве запроса в составе url.
 * @param name1 - Строка. Имя 1-го, 2-го или N-го атрибута объекта.
 * @param value1 - Строка, целое или вещественное число, дата и др. Значение 1-го, 2-го или N-го атрибута объекта.
 *     Примечание – Обязательным является наличие хотя бы одной пары аргументов <name> и <value>.
 * @returns {string} - Строка. Строка для использования в качестве запроса в составе url. Результат действия функции.
 */
function UrlEncodeQuery({name1: value1, name2: value2}) {
}

/**
 * Очищает значение данного элемента и его дочерних элементов. Поля типа string становятся пустыми строками, поля
 * других основных типов - становятся равны null. Если у полей есть значения по умолчанию - присваиваются значения по
 * умолчанию. Элементы типа MULTIPLE удаляются.
 */
Object.prototype.Clear = function () {
};

/**
 * Преобразует строку, содержащую дату или дату и время, в объект типа Дата (это специальный объект (структура) даты).
 * Если исходная строка содержит данные, отличные от указанных, то функция возвращает ошибку с прерыванием выполняемого
 * кода. Если аргумент не указан, то функция возвращает текущую дату. Если аргумент содержит данное типа Дата, то
 * функция возвращает его без изменений.
 * @param [str] - Строка или Дата. Строка должна содержать дату или дату и время. Исходная строка или исходная дата.
 *     Если аргумент не указан, то функция возвращает текущую дату.
 * @returns {date} - Объект типа Дата. Результат действия функции.
 */
function Date(str) {
}

/**
 * Выбирает элементы массива, удовлетворяющие заданному критерию.
 * @param array - Массив. Исходный массив.
 * @param qualExpr - Строка. Выражение, определяющее соответствие элемента массива заданному критерию и вычисляемое
 *     относительно каждого элемента массива. При формировании данного выражения может быть использована переменная
 *     This.
 * @returns {[]} - Массив. Массив, содержащий выбранные значения. Результат действия функции.
 */
function ArraySelect(array, qualExpr) {
}

/**
 * Атрибут. Возвращает соответствующий элемент целевого массива (описанного в атрибуте FOREIGN-ARRAY) или связанного
 * каталога. Если элемент не найден - возвращает ошибку и выполнение кода завершается.
 * @returns {{}} - Объект. Элемент целевого массива или связанного каталога.
 */
Number.prototype.ForeignElem = function () {
};

/**
 * Метод объекта. Выдает значение атрибута объекта. Если атрибут отсутствует, выдает ошибку.
 * @param propName - наименование атрибута объекта.
 * @returns {*} - Различные типы данных
 */
Object.prototype.GetProperty = function (propName) {
};

/**
 * Атрибут объекта. Выдает true, если атрибут с заданным наименованием существует, и false - если не существует.
 * @param propName - Наименование атрибута объекта.
 * @returns {boolean} - Выдает true, если атрибут с заданным наименованием существует, и false - если не существует.
 */
Object.prototype.HasProperty = function (propName) {
};

/**
 * Атрибут. Возвращает соответствующий элемент целевого массива (описанного в атрибуте FOREIGN-ARRAY) или связанного
 * каталога. В отличие от атрибута ForeignElem, если результат не найден - возвращает значение undefined.
 * @returns {{}} - Объект. Элемент целевого массива или связанного каталога.
 */
Number.prototype.OptForeignElem = function () {
};

function LoadUrlText(sUrl) {
    return '';
}

/**
 * Добавляет фрагмент пути <addPath> к заданному url. Примечание - Существование объекта по указанному url не
 * проверяется.
 * @param url - Строка. Строковое выражение базового url.
 * @param addPath - Строка. Строковое выражение добавляемого пути.
 * @returns {string} - Строка. Строка, содержащая результирующий url. Результат действия функции.
 */
function UrlAppendPath(url, addPath) {
}

/**
 * Заменяет все вхождения одной подстроки на другую в исходной строке, если такие вхождения имеются. Если указанные
 * вхождения отсутствуют, то возвращается исходная строка.
 * @param str - Строка. Исходная строка.
 * @param subStr - Строка. Подстрока для поиска. Если подстрока для поиска - пустая, то функция возвращает исходную
 *     строку.
 * @param newSubStr - Строка. Подстрока для замены. Если подстрока для замены - пустая, то функция удаляет все
 *     вхождения подстроки для поиска в исходной строке.
 * @returns {string} - Строка. Измененная строка. Результат действия функции.
 */
function StrReplace(str, subStr, newSubStr) {
}

/**
 * Кодирует аргумент как константу JavaScript. Используется для генерации выражений.
 * @param value - Строка, Число, Булево, Дата или др. Исходный аргумент.
 * @param [quoteChar] - Символ. Символ, используемый в качестве кавычки (допустимые значения: одинарная или двойная
 *     кавычка). По умолчанию используется одинарная кавычка.
 * @returns {string} -  Строка. Результат действия функции:
 * Значение типа undefined переводится в строку 'undefined'.
 * Значение типа null переводится в строку 'null'.
 * Значение типа string заключается в кавычки, при этом существующие кавычки внутри строки маскируются по правилам
 *     JavaScript.
 *  Значение типа integer или real переводится в соответствующее строковое значение
 *  Значение типа bool переводится в строку 'true' или 'false'.
 *  Значение типа date переводится в строку вида 'Date('2019-09-24T20:27:56+00:00')'
 */
function CodeLiteral(value, quoteChar) {
}

/**
 * Копирует в текущий элемент данные из другого элемента, включая дочерние элементы. Значения всех совпадающим по имени
 * элементов копируются, элементы с атрибутом MULTIPLE при этом синхронизируются по количеству. Если присваиваемый и
 * текущий элементы были созданы по разным формам - присваивются значения только по совпадающим полям.
 * @param srcElem - присваиваемый элемент (Объект XmlElem).
 */
Object.prototype.AssignElem = function (srcElem) {

};

/**
 * Включает/выключает заданный журнал, в который записывается информация (в строковом формате).
 * С помощью данной функции может быть создан пользовательский журнал.
 * @param {string} name - Тип: Строка. Название журнала.
 * @param {boolean} [enable] - Тип: Булево. Включить/выключить журнал (true – включить журнал, false – выключить журнал).
 * Если аргумент не указан, по умолчанию принимается значение true.
 */
function EnableLog(name, enable) {
}

/**
 * Делает запись в файл указанного журнала.
 * Если наименование журнала не указано, то запись делается в основной журнал (лог) системы.
 * @param {string} [name] - Тип: Строка. Наименование журнала. Если наименование журнала не указано, то запись делается в основной журнал системы.
 * @param {string} text - Тип: Строка. Текст, записываемый в журнал.
 */
function LogEvent(name, text) {
}

/**
 * Переводит все символы строки в верхний регистр.
 * @param {string} str - Тип: Строка. Исходная строка.
 * @return {string} - Тип: Строка. Строка, преобразованная к верхнему регистру. Результат действия функции.
 */
function StrUpperCase(str) {
    return ''
}
